import { getLogger } from './utils/logger';
import RouletteFeedService from './RouletteFeedService';
import RouletteStreamService from './RouletteStreamService';
import SocketService from './SocketService';
import EventService from './EventService';

const logger = getLogger('ServicesInitializer');

/**
 * Fun√ß√£o de inicializa√ß√£o dos servi√ßos principais do sistema
 * Inicializa o RouletteFeedService e RouletteStreamService de forma sincronizada
 */
export const initializeServices = async () => {
  logger.info('üöÄ Iniciando servi√ßos do sistema...');
  
  try {
    // 1. Obter inst√¢ncias dos servi√ßos
    const feedService = RouletteFeedService.getInstance();
    const streamService = RouletteStreamService.getInstance();
    const socketService = SocketService.getInstance();
    
    // 2. Registro de integra√ß√£o entre servi√ßos
    // Antes feito em main.tsx, agora centralizado aqui
    if (feedService && socketService) {
      feedService.registerSocketService(socketService);
      logger.info('‚úÖ SocketService registrado no RouletteFeedService');
    }
    
    // 3. Inicializar o servi√ßo de feed tradicional
    logger.info('‚è≥ Inicializando RouletteFeedService...');
    await feedService.initialize();
    
    // 4. Inicializar o servi√ßo de streaming 
    logger.info('‚è≥ Conectando ao servi√ßo de streaming...');
    streamService.connect();
    
    // 5. Emitir evento de inicializa√ß√£o finalizada
    EventService.emit('services:initialized', {
      timestamp: new Date().toISOString()
    });
    
    logger.success('‚úÖ Todos os servi√ßos inicializados com sucesso!');
    
    return { feedService, streamService, socketService };
  } catch (error) {
    logger.error('‚ùå Erro ao inicializar servi√ßos:', error);
    
    // Notificar sobre o erro de inicializa√ß√£o
    EventService.emit('services:initialization-error', {
      timestamp: new Date().toISOString(),
      error: error.message || 'Erro desconhecido'
    });
    
    // Retornar o FeedService mesmo em caso de erro, pois ele √© mais resiliente
    return { feedService: RouletteFeedService.getInstance() };
  }
};

export default initializeServices;
