// Script para verificar as configura√ß√µes do Asaas
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// Fun√ß√£o para ler e parsear o arquivo .env
function parseEnvFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    const env = {};

    for (const line of lines) {
      const trimmedLine = line.trim();
      if (trimmedLine && !trimmedLine.startsWith('#')) {
        const [key, value] = trimmedLine.split('=');
        if (key && value) {
          env[key.trim()] = value.trim();
        }
      }
    }

    return env;
  } catch (error) {
    console.error(`Erro ao ler o arquivo ${filePath}:`, error.message);
    return {};
  }
}

// Caminho para o arquivo .env
const envPath = path.resolve(__dirname, './backend/api/.env');
console.log(`Buscando arquivo .env em: ${envPath}`);

// Verificar se o arquivo existe
if (fs.existsSync(envPath)) {
  console.log('‚úÖ Arquivo .env encontrado');
  
  // Ler as configura√ß√µes
  const env = parseEnvFile(envPath);
  
  // Verificar configura√ß√µes do Asaas
  console.log('\nüîç Configura√ß√µes do Asaas:');
  
  const apiKey = env.ASAAS_API_KEY;
  const environment = env.ASAAS_ENVIRONMENT;
  const webhookSecret = env.ASAAS_WEBHOOK_SECRET;
  
  if (apiKey) {
    // Exibir apenas parte da chave por seguran√ßa
    const maskedKey = apiKey.substring(0, 10) + '...' + apiKey.substring(apiKey.length - 4);
    console.log(`‚úÖ Chave de API: ${maskedKey}`);
  } else {
    console.log('‚ùå Chave de API n√£o encontrada');
  }
  
  if (environment) {
    console.log(`‚úÖ Ambiente: ${environment}`);
    
    // Determinar a URL da API com base no ambiente
    const apiBaseUrl = environment === 'production' 
      ? 'https://www.asaas.com/api/v3'
      : 'https://sandbox.asaas.com/api/v3';
    console.log(`üîó URL base da API: ${apiBaseUrl}`);
  } else {
    console.log('‚ùå Ambiente n√£o configurado');
  }
  
  if (webhookSecret) {
    console.log('‚úÖ ASAAS_WEBHOOK_SECRET configurada');
  } else {
    console.error('‚ùå ASAAS_WEBHOOK_SECRET n√£o est√° configurada!');
    console.error('   Esta chave √© OBRIGAT√ìRIA para o processamento seguro de webhooks.');
    console.error('   1. Defina uma chave secreta forte (ex: string aleat√≥ria de 32+ caracteres)');
    console.error('   2. Configure esta mesma chave no painel do Asaas ao configurar o webhook');
    console.error('   3. Adicione a chave ao arquivo .env como ASAAS_WEBHOOK_SECRET');
    console.error('   AVISO: Os webhooks ser√£o rejeitados se esta configura√ß√£o n√£o existir!');
  }
  
  console.log('\nüí° Para testar a integra√ß√£o com o Asaas, √© necess√°rio:');
  console.log('   1. Uma chave de API v√°lida');
  console.log('   2. O ambiente corretamente configurado (sandbox/production)');
  console.log('   3. Uma conta ativa no Asaas');
} else {
  console.error('‚ùå Arquivo .env n√£o encontrado no caminho especificado');
}

// Verifica a configura√ß√£o m√≠nima de webhooks
console.log('\nVerificando configura√ß√£o de webhooks:');
const FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:3000';
console.log(`‚ÑπÔ∏è URL de frontend: ${FRONTEND_URL}`);
console.log(`‚ÑπÔ∏è URL para configurar no webhook do Asaas: ${FRONTEND_URL}/api/asaas-webhook`);
console.log('‚ÑπÔ∏è Confira se esta URL est√° configurada no painel do Asaas para receber eventos.');
console.log('‚ÑπÔ∏è Certifique-se de marcar a op√ß√£o "Enabled authentication with HMAC" no Asaas.');
console.log('‚ÑπÔ∏è Use o mesmo valor de ASAAS_WEBHOOK_SECRET ao configurar o webhook no painel do Asaas.');

// Resumo da verifica√ß√£o
let configOk = true;
if (!apiKey || !environment || !webhookSecret) {
  configOk = false;
}
if (configOk) {
  console.log('‚úÖ Configura√ß√£o do Asaas completa!');
} else {
  console.error('‚ùå H√° problemas na configura√ß√£o do Asaas. Verifique os erros acima.');
  console.error('   O sistema pode n√£o funcionar corretamente at√© que todas as configura√ß√µes sejam feitas.');
} 