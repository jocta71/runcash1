/**
 * Script para diagnosticar problemas de conex√£o WebSocket
 * 
 * Este script tenta estabelecer uma conex√£o WebSocket com o servidor
 * e imprime informa√ß√µes detalhadas sobre o processo de conex√£o.
 */

const { io } = require("socket.io-client");
const readline = require('readline');
require('dotenv').config();

// Obter o URL do WebSocket do ambiente ou usar um padr√£o
const WEBSOCKET_URL = process.env.WEBSOCKET_URL || "wss://runcash1-production.up.railway.app";

// Criar interface de linha de comando
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Imprimir cabe√ßalho
console.log("===== Diagn√≥stico de Conex√£o WebSocket =====");
console.log(`URL do servidor: ${WEBSOCKET_URL}`);
console.log("-------------------------------------------");

// Configura√ß√£o de debug para o socket.io-client
process.env.DEBUG = "socket.io-client:*";

// Pergunta ao usu√°rio qual URL usar
rl.question(`Usar o URL padr√£o (${WEBSOCKET_URL})? (S/n): `, (answer) => {
  let url = WEBSOCKET_URL;
  
  if (answer.toLowerCase() === 'n') {
    rl.question("Digite o URL do WebSocket: ", (customUrl) => {
      url = customUrl;
      connectToWebSocket(url);
    });
  } else {
    connectToWebSocket(url);
  }
});

function connectToWebSocket(url) {
  console.log(`\nIniciando conex√£o com ${url}...`);
  
  // Criar socket com op√ß√µes avan√ßadas
  const socket = io(url, {
    transports: ['websocket', 'polling'],
    reconnectionAttempts: 5,
    reconnectionDelay: 1000,
    reconnectionDelayMax: 5000,
    timeout: 20000,
    autoConnect: true,
    forceNew: true,
    extraHeaders: {
      "User-Agent": "WebSocketDiagnosticTool/1.0"
    }
  });
  
  // Eventos do ciclo de vida da conex√£o
  socket.on("connect_error", (err) => {
    console.error(`\n‚ùå Erro de conex√£o: ${err.message}`);
    console.error(`Detalhes: ${JSON.stringify(err)}`);
    
    if (err.message.includes("xhr poll error")) {
      console.log("\nüîç Diagn√≥stico: Erro de XHR Poll - Pode ser um problema de CORS ou proxy");
      console.log("Sugest√µes:");
      console.log("1. Verifique se o servidor est√° permitindo conex√µes de sua origem");
      console.log("2. Verifique se h√° um proxy/firewall bloqueando a conex√£o");
      console.log("3. Tente acessar o endpoint HTTP do servidor para verificar se est√° respondendo");
    } else if (err.message.includes("timeout")) {
      console.log("\nüîç Diagn√≥stico: Timeout de conex√£o");
      console.log("Sugest√µes:");
      console.log("1. Verifique se o servidor est√° online");
      console.log("2. Verifique se h√° problemas de rede que podem estar causando lat√™ncia");
      console.log("3. Aumente o valor do timeout na configura√ß√£o do cliente");
    }
  });
  
  socket.on("connect", () => {
    console.log("\n‚úÖ Conex√£o estabelecida com sucesso!");
    console.log(`ID do socket: ${socket.id}`);
    console.log("Protocolo de transporte: " + socket.io.engine.transport.name);
    
    // Emitir evento de teste
    console.log("\nEnviando evento de teste...");
    socket.emit("test", { message: "Hello from diagnostic tool" });
    
    // Solicitar status do servidor
    console.log("Solicitando status do servidor...");
    socket.emit("get_status");
  });
  
  socket.on("disconnect", (reason) => {
    console.log(`\n‚ö†Ô∏è Desconectado: ${reason}`);
    if (reason === "io server disconnect") {
      console.log("O servidor for√ßou a desconex√£o");
    } else if (reason === "transport close") {
      console.log("üîç Diagn√≥stico: A conex√£o de transporte foi fechada");
      console.log("Isso pode acontecer se o servidor estiver usando um proxy sem suporte adequado a WebSockets");
    } else if (reason === "ping timeout") {
      console.log("üîç Diagn√≥stico: Timeout de ping");
      console.log("O servidor n√£o est√° respondendo aos pings do cliente");
    }
  });
  
  socket.on("error", (error) => {
    console.error(`\n‚ùå Erro geral: ${error.message}`);
  });
  
  // Evento para upgrade de transporte
  socket.io.engine.on("upgrade", (transport) => {
    console.log(`\nüîÑ Upgrade de transporte: ${transport.name}`);
  });
  
  // Eventos espec√≠ficos da aplica√ß√£o
  socket.on("connection_status", (data) => {
    console.log("\nüîÑ Status de conex√£o recebido:");
    console.log(JSON.stringify(data, null, 2));
  });
  
  socket.on("global_update", (data) => {
    console.log("\nüìä Atualiza√ß√£o global recebida:");
    console.log(JSON.stringify(data, null, 2));
  });
  
  socket.on("strategy_update", (data) => {
    console.log("\nüìä Atualiza√ß√£o de estrat√©gia recebida:");
    console.log(JSON.stringify(data, null, 2));
  });
  
  // Aguardar eventos por 30 segundos e depois fechar
  console.log("\nAguardando eventos por 30 segundos...");
  setTimeout(() => {
    console.log("\n‚è±Ô∏è Tempo esgotado. Encerrando conex√£o...");
    socket.disconnect();
    
    console.log("\n===== Resumo do Diagn√≥stico =====");
    console.log(`URL: ${url}`);
    console.log(`Estado da conex√£o: ${socket.connected ? "Conectado" : "Desconectado"}`);
    if (socket.connected) {
      console.log(`ID do Socket: ${socket.id}`);
      console.log(`Transporte: ${socket.io.engine.transport.name}`);
    }
    console.log("===============================");
    
    rl.close();
  }, 30000);
}

// Evento quando o usu√°rio encerra o programa
rl.on('close', () => {
  console.log('Diagn√≥stico de WebSocket encerrado.');
  process.exit(0);
}); 