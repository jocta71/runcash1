#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de inicializa√ß√£o do scraper real - Vers√£o sem estrat√©gia
Este script apenas extrai n√∫meros das roletas sem aplicar estrat√©gias
"""

import time
import os
import sys
import threading
import multiprocessing
import signal
import logging
import json
import pymongo
import random
from datetime import datetime, timedelta
import traceback

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [SCRAPER] - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('runcash_scraper')
logger.setLevel(logging.INFO)


# Banner inicial
print("\n\n" + "=" * 80)
print(" SCRAPER RunCash - Extra√ß√£o de N√∫meros (Vers√£o Simplificada) ".center(80, "="))
print(f" Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ".center(80, "="))
print("=" * 80 + "\n")

# Verificar se estamos em ambiente de produ√ß√£o
IS_PRODUCTION = os.environ.get('PRODUCTION', False)

# Configurar vari√°vel de ambiente para o banco de dados roletas_db
os.environ['ROLETAS_MONGODB_DB_NAME'] = 'roletas_db'
logger.info(f"üîß Configurando banco de dados: {os.environ['ROLETAS_MONGODB_DB_NAME']}")

# Importar os m√≥dulos do scraper
try:
    from scraper_mongodb import scrape_roletas
    
    # Tentar importar o adaptador para o novo banco de dados
    try:
        from adaptar_scraper_roletas_db import ScraperAdapter
        ADAPTADOR_DISPONIVEL = True
        logger.info("‚úÖ Adaptador para banco de dados otimizado importado com sucesso")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Adaptador para banco otimizado n√£o dispon√≠vel: {str(e)}")
        logger.warning("‚ö†Ô∏è Usando fonte de dados MongoDB tradicional")
        ADAPTADOR_DISPONIVEL = False
        from data_source_mongo import MongoDataSource
    
    # Importar Flask para health checks - tente uma importa√ß√£o simplificada
    FLASK_DISPONIVEL = False
    try:
        import threading
        try:
            from flask import Flask, jsonify
            from datetime import datetime
            
            # Criar uma aplica√ß√£o Flask m√≠nima caso o server.py n√£o seja encontrado
            try:
                from server import app as flask_app
                from server import start_server
                FLASK_DISPONIVEL = True
                logger.info("‚úÖ Servidor Flask para health checks importado com sucesso")
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è Servidor Flask n√£o dispon√≠vel: {str(e)}")
                logger.warning("‚ö†Ô∏è Criando servidor Flask m√≠nimo para health checks")
                
                # Criar uma aplica√ß√£o Flask m√≠nima para health checks
                flask_app = Flask(__name__)
                
                @flask_app.route('/')
                @flask_app.route('/health')
                def health_check():
                    return jsonify({
                        "status": "ok",
                        "service": "RunCash Scraper Service (minimal)",
                        "timestamp": datetime.now().isoformat()
                    })
                
                def start_server():
                    flask_app.run(host='0.0.0.0', port=8080, debug=False, threaded=True)
                
                FLASK_DISPONIVEL = True
                logger.info("‚úÖ Servidor Flask m√≠nimo criado para health checks")
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Flask n√£o dispon√≠vel: {str(e)}")
            FLASK_DISPONIVEL = False
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erro ao configurar Flask para health checks: {str(e)}")
        FLASK_DISPONIVEL = False
    
    print("[INFO] ‚úÖ M√≥dulos do scraper importados com sucesso")
except ImportError as e:
    print(f"[ERRO CR√çTICO] ‚ùå Erro ao importar m√≥dulos do scraper: {str(e)}")
    sys.exit(1)

# Flag para controle de in√≠cio/parada
executing = True

def signal_handler(sig, frame):
    """
    Manipulador de sinais para interrup√ß√£o limpa
    """
    global executing
    print("\n[INFO] üõë Recebido sinal de interrup√ß√£o. Encerrando scraper...")
    executing = False
    sys.exit(0)

def main():
    """
    Fun√ß√£o principal do scraper
    """
    global executing
    
    # Registrar manipulador de sinal para CTRL+C
    signal.signal(signal.SIGINT, signal_handler)
    
    try:
        # Banner de inicializa√ß√£o
        logger.info("üöÄ Iniciando scraper de roletas (modo de extra√ß√£o simplificada)")
        logger.info(f"üìÖ Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Iniciar o servidor Flask em uma thread separada para health checks
        if FLASK_DISPONIVEL:
            try:
                logger.info("üîÑ Iniciando servidor Flask para health checks...")
                flask_thread = threading.Thread(target=start_server)
                flask_thread.daemon = True
                flask_thread.start()
                logger.info("‚úÖ Servidor Flask para health checks iniciado com sucesso")
            except Exception as e:
                logger.error(f"‚ùå Erro ao iniciar servidor Flask: {str(e)}")
                logger.warning("‚ö†Ô∏è Continuando sem servidor para health checks")
        
        # Verificar vari√°veis de ambiente
        mongodb_uri = os.environ.get('MONGODB_URI', 'mongodb://localhost:27017/runcash')
        min_cycle_time = int(os.environ.get('MIN_CYCLE_TIME', 10))  # Tempo m√≠nimo entre ciclos
        max_errors = int(os.environ.get('MAX_ERRORS', 5))  # M√°ximo de erros antes de reiniciar
        
        # Log das configura√ß√µes
        logger.info(f"üîå Conectando a MongoDB: {mongodb_uri.split('@')[-1]}")
        logger.info(f"üìä Nome do banco de dados: {os.environ['ROLETAS_MONGODB_DB_NAME']}")
        logger.info(f"‚è±Ô∏è Tempo m√≠nimo entre ciclos: {min_cycle_time} segundos")
        
        # Inicializar a fonte de dados
        data_source = None
        try:
            if ADAPTADOR_DISPONIVEL:
                logger.info("üîÑ Inicializando adaptador para banco otimizado...")
                data_source = ScraperAdapter()
                logger.info("‚úÖ Adaptador inicializado com sucesso")
            else:
                logger.info("üîÑ Inicializando fonte de dados MongoDB tradicional...")
                data_source = MongoDataSource()
                logger.info("‚úÖ Fonte de dados inicializada com sucesso")
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar fonte de dados: {str(e)}")
            logger.error(traceback.format_exc())
            logger.warning("‚ö†Ô∏è Continuando sem conex√£o com o banco de dados...")
        
        # Verificar se a fonte de dados foi inicializada
        if data_source is None:
            logger.warning("‚ö†Ô∏è Fonte de dados n√£o inicializada. Apenas o health check estar√° dispon√≠vel.")
            
            # Se n√£o temos fonte de dados mas temos Flask, mantenha o servidor rodando para health checks
            if FLASK_DISPONIVEL:
                logger.info("üîÑ Executando apenas o servidor para health checks...")
                try:
                    # Manter o processo principal rodando para que a thread do Flask continue
                    while True:
                        time.sleep(60)
                except KeyboardInterrupt:
                    logger.info("üëã Servidor interrompido pelo usu√°rio")
                except Exception as e:
                    logger.error(f"‚ùå Erro no loop principal: {str(e)}")
                finally:
                    logger.info("üõë Servidor encerrado")
                    sys.exit(0)
            else:
                logger.error("‚ùå Nem fonte de dados nem Flask est√£o dispon√≠veis. Encerrando...")
                sys.exit(1)
        
        # Contador de ciclos e erros
        cycle_count = 0
        consecutive_errors = 0
        start_time = time.time()
        
        # Loop principal
        while executing:
            cycle_start = time.time()
            cycle_count += 1
            
            try:
                # Log do in√≠cio do ciclo
                logger.info(f"üîÑ Iniciando ciclo #{cycle_count} de extra√ß√£o")
                
                # Modo real - extrair dados das roletas
                scrape_roletas(data_source)
                logger.info("‚úÖ Extra√ß√£o de n√∫meros conclu√≠da com sucesso")
                
                # Resetar contador de erros ap√≥s ciclo bem-sucedido
                consecutive_errors = 0
                
            except Exception as e:
                # Incrementar contador de erros consecutivos
                consecutive_errors += 1
                
                # Log do erro
                logger.error(f"‚ùå Erro durante o ciclo #{cycle_count}: {str(e)}")
                logger.error(traceback.format_exc())
                
                # Verificar se excedeu o limite de erros
                if consecutive_errors >= max_errors:
                    logger.critical(f"üö® {consecutive_errors} erros consecutivos. Reiniciando o scraper...")
                    break
            
            # Calcular quanto tempo o ciclo levou
            cycle_duration = time.time() - cycle_start
            
            # Calcular tempo de espera para o pr√≥ximo ciclo
            # Garantir que cada ciclo dure pelo menos o tempo m√≠nimo configurado
            wait_time = max(0, min_cycle_time - cycle_duration)
            
            # Log do fim do ciclo
            logger.info(f"‚è±Ô∏è Ciclo #{cycle_count} completado em {cycle_duration:.2f}s. "
                       f"Aguardando {wait_time:.2f}s para o pr√≥ximo ciclo...")
            
            # Aguardar para o pr√≥ximo ciclo (se o scraper n√£o foi interrompido)
            if executing and wait_time > 0:
                time.sleep(wait_time)
        
        # Calcular estat√≠sticas finais
        total_duration = time.time() - start_time
        logger.info(f"üìä Scraper executado por {total_duration:.2f}s, "
                   f"completando {cycle_count} ciclos.")
        
    except KeyboardInterrupt:
        logger.info("üëã Scraper interrompido pelo usu√°rio")
    except Exception as e:
        logger.critical(f"üö® Erro cr√≠tico no scraper: {str(e)}")
        logger.critical(traceback.format_exc())
    finally:
        # Fechar conex√µes
        if 'data_source' in locals():
            try:
                if hasattr(data_source, 'fechar'):
                    data_source.fechar()
                    logger.info("‚úÖ Conex√µes com banco de dados fechadas")
            except Exception as e:
                logger.error(f"‚ùå Erro ao fechar conex√µes: {str(e)}")
                
        logger.info("üõë Scraper encerrado")

if __name__ == "__main__":
    # Executar a fun√ß√£o principal
    main() 