#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script para executar o scraper em modo real com integra√ß√£o de an√°lise de estrat√©gia
"""

import sys
import time
import logging
import json
import requests
import traceback
from datetime import datetime

# Configurar logging para mostrar mais informa√ß√µes
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)  # Ensure logs go to stdout for Railway
    ]
)
logger = logging.getLogger(__name__)

# Imports locais - reorganizados para evitar importa√ß√£o circular
try:
    from data_source_mongo import MongoDataSource
    from strategy_analyzer import StrategyAnalyzer
    from strategy_helper import atualizar_estrategia
    # Import scraper_mongodb later to avoid circular imports
    logger.info("‚úÖ M√≥dulos b√°sicos importados com sucesso")
except Exception as e:
    logger.error(f"‚ùå Erro ao importar m√≥dulos b√°sicos: {str(e)}")
    traceback.print_exc()
    sys.exit(1)

# Dicion√°rio global para armazenar inst√¢ncias de analisadores de estrat√©gia
_strategy_analyzers = {}

# Configura√ß√£o do WebSocket - ajustar conforme necess√°rio
# Esta URL deve apontar para o servidor WebSocket que voc√™ implantou
WEBSOCKET_SERVER_URL = "http://localhost:5000/emit-event"  # URL local com protocolo http://

# Log da configura√ß√£o
logger.info(f"üîå WebSocket configurado para: {WEBSOCKET_SERVER_URL}")

def notify_websocket(event_type, data):
    """
    Envia um evento para o servidor WebSocket
    """
    try:
        payload = {
            "event": event_type,
            "data": data
        }
        
        logger.info(f"\n[WebSocket] Enviando evento {event_type}:")
        logger.info(json.dumps(data, indent=2, ensure_ascii=False))
        
        response = requests.post(WEBSOCKET_SERVER_URL, json=payload)
        
        if response.status_code == 200:
            logger.info(f"[WebSocket] ‚úÖ Evento {event_type} enviado com sucesso")
        else:
            logger.error(f"[WebSocket] ‚ùå Falha ao enviar evento: {response.status_code} - {response.text}")
    
    except Exception as e:
        logger.error(f"[WebSocket] ‚ùå Erro ao notificar WebSocket: {str(e)}")
        traceback.print_exc()

def get_analyzer(roleta_id, roleta_nome):
    """
    Obt√©m ou cria uma inst√¢ncia do analisador de estrat√©gia para uma roleta
    """
    global _strategy_analyzers
    
    # Criar chave global √∫nica para esta roleta
    key = f"{roleta_id}:{roleta_nome}"
    
    # Se j√° existe um analisador para esta roleta, retorn√°-lo
    if key in _strategy_analyzers:
        return _strategy_analyzers[key]
    
    # Caso contr√°rio, criar uma nova inst√¢ncia
    try:
        logger.info(f"\n[Estrat√©gia] üé≤ Criando novo analisador para roleta: {roleta_nome}")
        analyzer = StrategyAnalyzer(table_name=roleta_nome)
        _strategy_analyzers[key] = analyzer
        return analyzer
    except Exception as e:
        logger.error(f"[Estrat√©gia] ‚ùå Erro ao criar analisador: {str(e)}")
        return None

def generate_display_suggestion(estado, terminais):
    """
    Gera uma sugest√£o de exibi√ß√£o baseada no estado da estrat√©gia
    """
    if estado == "NEUTRAL":
        return "AGUARDANDO GATILHO"
    elif estado == "TRIGGER" and terminais:
        return f"APOSTAR EM: {','.join(map(str, terminais))}"
    elif estado == "POST_GALE_NEUTRAL" and terminais:
        return f"GALE EM: {','.join(map(str, terminais))}"
    elif estado == "MORTO":
        return "AGUARDANDO PR√ìXIMO CICLO"
    
    return ""

def process_new_number(db, roleta_id, roleta_nome, numero):
    """
    Processa um novo n√∫mero com o analisador de estrat√©gia e atualiza no MongoDB
    """
    logger.info(f"\n{'='*50}")
    logger.info(f"üé≤ NOVO N√öMERO DETECTADO")
    logger.info(f"üìç Roleta: {roleta_nome}")
    logger.info(f"üî¢ N√∫mero: {numero}")
    logger.info(f"{'='*50}")
    
    try:
        # Obter o analisador para esta roleta
        analyzer = get_analyzer(roleta_id, roleta_nome)
        
        if not analyzer:
            logger.error(f"‚ùå N√£o foi poss√≠vel obter analisador para roleta {roleta_nome}")
            return None
        
        # Adicionar o novo n√∫mero
        analyzer.add_number(numero)
        
        # Obter o status atual da estrat√©gia
        data = analyzer.get_data()
        estrategia = data.get("estrategia", {})
        
        # Atualizar no MongoDB
        logger.info(f"\n[MongoDB] üíæ Atualizando estrat√©gia para roleta {roleta_nome}")
        
        atualizar_estrategia(
            roleta_id=roleta_id,
            roleta_nome=roleta_nome,
            estado=estrategia.get("estado", "NEUTRAL"),
            numero_gatilho=estrategia.get("numero_gatilho", -1),
            terminais_gatilho=estrategia.get("terminais_gatilho", []),
            vitorias=estrategia.get("vitorias", 0),
            derrotas=estrategia.get("derrotas", 0)
        )
        
        # Notificar o WebSocket sobre o novo n√∫mero
        event_data = {
            "roleta_id": roleta_id,
            "roleta_nome": roleta_nome,
            "numero": numero,
            "timestamp": datetime.now().isoformat()
        }
        notify_websocket("new_number", event_data)
        
        # Notificar o WebSocket sobre a atualiza√ß√£o da estrat√©gia
        strategy_data = {
            "roleta_id": roleta_id,
            "roleta_nome": roleta_nome,
            "estado": estrategia.get("estado", "NEUTRAL"),
            "numero_gatilho": estrategia.get("numero_gatilho", -1),
            "terminais_gatilho": estrategia.get("terminais_gatilho", []),
            "vitorias": estrategia.get("vitorias", 0),
            "derrotas": estrategia.get("derrotas", 0),
            "display_suggestion": generate_display_suggestion(
                estrategia.get("estado", "NEUTRAL"),
                estrategia.get("terminais_gatilho", [])
            ),
            "timestamp": datetime.now().isoformat()
        }
        notify_websocket("strategy_update", strategy_data)
        
        # Mostrar resumo da estrat√©gia
        logger.info(f"\n[Estrat√©gia] üìä Status Atual:")
        logger.info(f"Estado: {estrategia.get('estado', 'NEUTRAL')}")
        logger.info(f"Vit√≥rias: {estrategia.get('vitorias', 0)}")
        logger.info(f"Derrotas: {estrategia.get('derrotas', 0)}")
        if estrategia.get('terminais_gatilho'):
            logger.info(f"Terminais: {estrategia.get('terminais_gatilho', [])}")
        logger.info(f"{'='*50}\n")
        
        return estrategia
    
    except Exception as e:
        logger.error(f"‚ùå Erro ao processar n√∫mero {numero} para roleta {roleta_nome}: {str(e)}")
        traceback.print_exc()
        return None

def main():
    """
    Fun√ß√£o principal para executar o scraper em modo real
    """
    logger.info("\nüöÄ Iniciando scraper REAL com integra√ß√£o de an√°lise de estrat√©gia...")
    
    try:
        # Inicializar fonte de dados MongoDB
        logger.info("Conectando ao MongoDB...")
        db = MongoDataSource()
        logger.info("‚úÖ Conex√£o ao MongoDB estabelecida com sucesso")
        
        # Importar scraper_mongodb aqui para evitar importa√ß√£o circular
        try:
            from scraper_mongodb import scrape_roletas
            logger.info("‚úÖ M√≥dulo scraper_mongodb importado com sucesso")
        except Exception as e:
            logger.error(f"‚ùå Erro ao importar scraper_mongodb: {str(e)}")
            traceback.print_exc()
            return 1
        
        # Hook para processar n√∫meros da roleta
        def numero_hook(roleta_id, roleta_nome, numero):
            """
            Hook chamado quando um novo n√∫mero √© detectado pelo scraper
            """
            # Processar o n√∫mero com o analisador de estrat√©gia
            logger.info(f"üìç Processando n√∫mero {numero} para roleta {roleta_nome}")
            status = process_new_number(db, roleta_id, roleta_nome, numero)
            
            if not status:
                logger.error(f"‚ùå Falha ao processar n√∫mero {numero} para estrat√©gia")
        
        logger.info("\nüé∞ Executando em modo REAL - Acessando site da casa de apostas")
        
        # Executar o scraper real com o hook
        scrape_roletas(db, numero_hook=numero_hook)
        
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar scraper: {str(e)}")
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    try:
        logger.info("üèÅ Iniciando script run_real_scraper.py")
        sys.exit(main())
    except Exception as e:
        logger.critical(f"üí• Erro cr√≠tico n√£o tratado: {str(e)}")
        traceback.print_exc()
        sys.exit(1)