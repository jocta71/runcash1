#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo de configura√ß√£o e utilit√°rios para MongoDB
"""

import os
import logging
import re
from datetime import datetime
from typing import Dict, Any, Tuple, Dict, List
from pymongo import MongoClient, ASCENDING, DESCENDING
from pymongo.collection import Collection
from pymongo.database import Database

# Modificado para usar ROLETAS_MONGODB_DB_NAME se dispon√≠vel
from config import MONGODB_URI, logger
# Usar vari√°vel de ambiente ROLETAS_MONGODB_DB_NAME se dispon√≠vel, caso contr√°rio usar MONGODB_DB_NAME
MONGODB_DB_NAME = os.environ.get('ROLETAS_MONGODB_DB_NAME') or os.environ.get('MONGODB_DB_NAME', 'runcash')

# Flag para identificar se estamos usando o banco otimizado de roletas - sempre TRUE agora
USANDO_BANCO_ROLETAS_DB = True

# Padr√£o para verificar se o ID √© num√©rico
NUMERIC_ID_PATTERN = re.compile(r'^[0-9]+$')

def conectar_mongodb() -> Tuple[MongoClient, Database]:
    """
    Estabelece conex√£o com MongoDB
    
    Returns:
        Tuple[MongoClient, Database]: Cliente MongoDB e objeto de banco de dados
    """
    try:
        # Conectar ao MongoDB sem configura√ß√£o de pool
        client = MongoClient(MONGODB_URI)
        db = client[MONGODB_DB_NAME]
        
        # Verificar conex√£o
        db.command('ping')
        logger.info(f"Conex√£o MongoDB estabelecida com sucesso: {MONGODB_URI}")
        logger.info(f"Usando banco de dados: {MONGODB_DB_NAME}")
        logger.info("üîπ Usando modelo otimizado com cole√ß√µes espec√≠ficas por roleta")
        
        return client, db
    except Exception as e:
        logger.error(f"Erro ao conectar ao MongoDB: {str(e)}")
        raise

def criar_colecao_roleta(db: Database, roleta_id: str) -> Collection:
    """
    Cria uma cole√ß√£o espec√≠fica para uma roleta
    
    Args:
        db (Database): Banco de dados MongoDB
        roleta_id (str): ID da roleta
        
    Returns:
        Collection: Cole√ß√£o criada
    """
    # Verificar se o ID da roleta √© num√©rico
    if not NUMERIC_ID_PATTERN.match(roleta_id):
        logger.warning(f"ALERTA: Criando cole√ß√£o com ID n√£o num√©rico: {roleta_id}")
        logger.warning("IDs n√£o num√©ricos podem causar problemas de compatibilidade")
    
    # Nome da cole√ß√£o = ID da roleta
    colecao_nome = roleta_id
    
    # Verificar se a cole√ß√£o j√° existe
    if colecao_nome not in db.list_collection_names():
        # Criar cole√ß√£o
        db.create_collection(colecao_nome)
        
        # Criar √≠ndices
        db[colecao_nome].create_index([("timestamp", DESCENDING)])
        db[colecao_nome].create_index([("numero", ASCENDING)])
        db[colecao_nome].create_index([("cor", ASCENDING)])
        
        logger.info(f"Cole√ß√£o espec√≠fica '{colecao_nome}' criada com √≠ndices")
    else:
        logger.info(f"Cole√ß√£o espec√≠fica '{colecao_nome}' j√° existe")
    
    return db[colecao_nome]

def inicializar_colecoes_especificas(db: Database) -> Dict[str, Collection]:
    """
    Inicializa cole√ß√µes espec√≠ficas para roletas existentes
    
    Args:
        db (Database): Banco de dados MongoDB
        
    Returns:
        Dict[str, Collection]: Dicion√°rio com as cole√ß√µes por roleta
    """
    colecoes_por_roleta = {}
    
    try:
        # Cole√ß√£o de metadados
        if "metadados" not in db.list_collection_names():
            db.create_collection("metadados")
            db.metadados.create_index([("roleta_id", ASCENDING)], unique=True)
            logger.info("Cole√ß√£o 'metadados' criada")
        
        # Verificar roletas existentes na cole√ß√£o metadados
        if "metadados" in db.list_collection_names():
            roletas_meta = list(db.metadados.find({"ativa": True}))
            logger.info(f"Encontradas {len(roletas_meta)} roletas na cole√ß√£o 'metadados'")
            
            for roleta in roletas_meta:
                roleta_id = roleta.get("roleta_id")
                
                # Verificar se o ID √© num√©rico
                if not NUMERIC_ID_PATTERN.match(str(roleta_id)):
                    logger.warning(f"ID n√£o num√©rico encontrado: {roleta_id}")
                
                # Adicionar a cole√ß√£o ao dicion√°rio
                colecao = criar_colecao_roleta(db, roleta_id)
                colecoes_por_roleta[roleta_id] = colecao
        
        # Tamb√©m verificar cole√ß√µes existentes que podem ser de roletas
        colecoes_numericas = []
        colecoes_nao_numericas = []
        
        for colecao_nome in db.list_collection_names():
            # Ignorar cole√ß√µes de sistema e metadados
            if colecao_nome.startswith("system.") or colecao_nome in ["metadados"]:
                continue
                
            # Se for uma cole√ß√£o antiga comum, n√£o considerar como roleta
            if colecao_nome in ["roletas", "roleta_numeros", "roleta_estatisticas_diarias", "roleta_sequencias"]:
                continue
                
            # Verificar se o nome da cole√ß√£o √© um ID num√©rico
            if NUMERIC_ID_PATTERN.match(colecao_nome):
                colecoes_numericas.append(colecao_nome)
                
                # Assumir que a cole√ß√£o √© uma roleta
                roleta_id = colecao_nome
                
                # S√≥ adicionar se ainda n√£o estiver no dicion√°rio
                if roleta_id not in colecoes_por_roleta:
                    colecoes_por_roleta[roleta_id] = db[colecao_nome]
                
                # Verificar se est√° nos metadados
                if not db.metadados.find_one({"roleta_id": roleta_id}):
                    # Adicionar aos metadados
                    db.metadados.update_one(
                        {"roleta_id": roleta_id},
                        {"$set": {
                            "roleta_id": roleta_id,
                            "roleta_nome": f"Roleta {roleta_id}",
                            "colecao": roleta_id,
                            "ativa": True,
                            "atualizado_em": datetime.now()
                        }},
                        upsert=True
                    )
            else:
                # Manter um registro de cole√ß√µes n√£o num√©ricas para log
                colecoes_nao_numericas.append(colecao_nome)
        
        logger.info(f"Inicializadas {len(colecoes_por_roleta)} cole√ß√µes espec√≠ficas para roletas")
        
        # Informar sobre as cole√ß√µes n√£o num√©ricas
        if colecoes_nao_numericas:
            logger.warning(f"Encontradas {len(colecoes_nao_numericas)} cole√ß√µes com IDs n√£o num√©ricos: {', '.join(colecoes_nao_numericas)}")
            logger.warning("Essas cole√ß√µes podem ser problem√°ticas para a compatibilidade")
        
        # Informar sobre as cole√ß√µes que ser√£o ignoradas
        for colecao_antiga in ["roletas", "roleta_numeros", "roleta_estatisticas_diarias", "roleta_sequencias"]:
            if colecao_antiga in db.list_collection_names():
                logger.info(f"‚ÑπÔ∏è A cole√ß√£o '{colecao_antiga}' ser√° ignorada no modelo otimizado")
        
        return colecoes_por_roleta
    except Exception as e:
        logger.error(f"Erro ao inicializar cole√ß√µes espec√≠ficas: {str(e)}")
        return {}

def inicializar_colecoes() -> Dict[str, Any]:
    """
    Inicializa as cole√ß√µes do MongoDB e configura √≠ndices
    
    Returns:
        Dict[str, Collection]: Dicion√°rio com as cole√ß√µes
    """
    try:
        # Conectar ao MongoDB
        client, db = conectar_mongodb()
        
        # Inicializar dicion√°rio de cole√ß√µes espec√≠ficas
        colecoes_por_roleta = inicializar_colecoes_especificas(db)
        
        # Inicializar dicion√°rio de cole√ß√µes (mantido para compatibilidade)
        colecoes = {}
        
        # Adicionar informa√ß√µes extras no resultado
        recursos = {
            "client": client,
            "db": db,
            "colecoes": colecoes,  # Dicion√°rio vazio, n√£o usamos mais as cole√ß√µes comuns
            "colecoes_por_roleta": colecoes_por_roleta,
            "config": {
                "usa_colecoes_separadas": True  # Sempre TRUE
            }
        }
        
        logger.info("Todas as cole√ß√µes inicializadas com sucesso")
        return recursos
    except Exception as e:
        logger.error(f"Erro ao inicializar cole√ß√µes MongoDB: {str(e)}")
        raise

def numero_para_documento(
    roleta_id: str, 
    roleta_nome: str, 
    numero: int, 
    cor: str = None,
    timestamp: str = None
) -> Dict[str, Any]:
    """
    Converte um n√∫mero para um documento MongoDB
    
    Args:
        roleta_id: ID da roleta
        roleta_nome: Nome da roleta
        numero: N√∫mero sorteado
        cor: Cor do n√∫mero (opcional)
        timestamp: Timestamp do evento (opcional)
        
    Returns:
        Dict com documento para inser√ß√£o
    """
    from scraper_core import determinar_cor_numero
    
    # Usar timestamp atual se n√£o fornecido
    if timestamp is None:
        data_hora = datetime.now()
    else:
        # Converter string para datetime
        try:
            data_hora = datetime.fromisoformat(timestamp)
        except:
            data_hora = datetime.now()
    
    # Determinar cor se n√£o fornecida
    if cor is None:
        cor = determinar_cor_numero(numero)
    
    # Criar documento
    documento = {
        "roleta_id": roleta_id,
        "roleta_nome": roleta_nome,
        "numero": numero,
        "cor": cor,
        "timestamp": data_hora,
        "criado_em": datetime.now()
    }
    
    return documento

def roleta_para_documento(roleta_id: str, roleta_nome: str) -> Dict[str, Any]:
    """
    Converte uma roleta para um documento MongoDB
    
    Args:
        roleta_id: ID da roleta
        roleta_nome: Nome da roleta
        
    Returns:
        Dict com documento para inser√ß√£o
    """
    documento = {
        "_id": roleta_id,
        "nome": roleta_nome,
        "ativa": True,
        "criado_em": datetime.now(),
        "atualizado_em": datetime.now()
    }
    
    return documento

# Inicializar conex√£o quando o m√≥dulo √© importado
if __name__ != "__main__":
    try:
        conectar_mongodb()
    except Exception as e:
        logger.error(f"Erro ao inicializar conex√£o MongoDB: {str(e)}") 